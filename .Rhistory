library(leaflet)
library(tmap)
library(tidyverse)
library(shiny)
library(igraph)
library(tidygraph)
library(ggraph)
tmap_mode("view")
# Load pre-processed Leeds OD matrix and Leeds boundaries datasets(requires access to SEED)
source("M:\\GitHub\\Leeds_Microsim\\R_proj\\preprocessing_leeds_OD_matrix.R")
# Load 2011 Census OD flows
census_flows <- read.csv("M:\\GitHub\\Leeds_Microsim\\data\\OD_leeds_MSOA_commute_census.csv")
# Table of the most frequent origin wards
o_table <- leeds_OD_matrix %>%
group_by(origin_ward) %>%
summarize(o_count = n()) %>%
arrange(desc(o_count))
# Table of the most frequent destination wards
d_table <- leeds_OD_matrix %>%
group_by(destination_ward) %>%
summarize(d_count = n()) %>%
arrange(desc(d_count))
# Create a table which deducts the count of origins from destinations
final_table <- o_table %>% left_join(d_table, by = c("origin_ward" = "destination_ward"))
final_table$inflows_count <- final_table$d_count - final_table$o_count
final_table %>%
select(origin_ward,inflows_count) %>%
arrange(desc(inflows_count))
final_table %>%
select(origin_ward,inflows_count) %>%
arrange(inflows_count)
# Join inflows dataframe with wards
wards <- wards %>% left_join(final_table, by = c ("ward_name" = "origin_ward"))
# Add spatial information about the wards
wards <- wards %>% left_join(boundaries %>% select(msoa11cd, geometry), by = c("msoa" = "msoa11cd"))
wards <- wards %>% st_sf(sf_column_name = "geometry")
# Map of the inflows counts
tm_shape(wards) +
tm_polygons(col = "inflows_count", style = "jenks", midpoint = NA)
# Join inflows dataframe with wards
wards <- wards %>% left_join(final_table, by = c ("ward_name" = "origin_ward"))
# Add spatial information about the wards
wards <- wards %>% left_join(boundaries %>% select(msoa11cd, geometry), by = c("msoa" = "msoa11cd"))
# Map of the inflows counts
tm_shape(wards) +
tm_polygons(col = "inflows_count")
# Map of the inflows counts
tm_shape(wards) +
tm_polygons(col = "inflows_count")
# Join inflows dataframe with wards
wards <- ward_lookup %>% left_join(final_table, by = c ("ward_name" = "origin_ward"))
# Add spatial information about the wards
wards <- wards %>% left_join(boundaries %>% select(msoa11cd, geometry), by = c("msoa" = "msoa11cd"))
wards <- wards %>% st_sf(sf_column_name = "geometry")
# Map of the inflows counts
tm_shape(wards) +
tm_polygons(col = "inflows_count")
# Map of the inflows counts
tm_shape(wards) +
tm_polygons(col = "inflows_count", style = "jenks", midpoint = NA)
# Map of the inflows counts
tm_shape(wards) +
tm_polygons(col = "inflows_count", style = "jenks", midpoint = NA,  palette="RdYlGn")
# Required packages
library(sf)
library(stplanr)
library(leaflet)
library(tmap)
library(dplyr)
library(igraph)
library(ggraph)
tmap_mode("view")
# Load the Origin-Destination (OD) flows
flows <- read.csv("data\\2011_census_flows.csv")
# Load Ward names lookup dataset
wards <-
read.csv("data//Leeds_MSOA_Ward_LookUp.csv")
# Read in shapefile containing GB MSOA boundaries
boundaries <-
sf::read_sf(
"data//boundaries//Middle_Layer_Super_Output_Areas_December_2011_Super_Generalised_Clipped_Boundaries_in_England_and_Wales.shp"
)
# Filter boundaries for Leeds
leeds_boundaries <- boundaries %>%
filter(stringr::str_detect(msoa11nm, 'Leeds')) %>%
st_transform(boundaries, crs = 27700)
# Add ward names to Leeds OD matrix
leeds_OD_matrix <- flows %>%
left_join(wards %>%  select(msoa, ward_name), by = c("origin" = "msoa")) %>%
rename("origin_ward" = "ward_name") %>%
left_join(wards %>%  select(msoa, ward_name), by = c("destination" = "msoa")) %>%
rename("destination_ward" = "ward_name")
# Add the geometry information for MSOA's
leeds_OD_matrix <- leeds_OD_matrix %>%
left_join(leeds_boundaries %>% select(msoa11cd, geometry),
by = c("origin" = "msoa11cd")) %>%
rename("geometry_origin" = "geometry") %>%
left_join(leeds_boundaries %>% select(msoa11cd, geometry),
by = c("destination" = "msoa11cd")) %>%
rename("geometry_destination" = "geometry")
rm(leeds_boundaries)
# Table of the most frequent origin wards
o_table <- leeds_OD_matrix  %>%
group_by(origin_ward) %>%
summarize(o_count = n()) %>%
arrange(desc(o_count))
# Table of the most frequent destination wards
d_table <- leeds_OD_matrix %>%
group_by(destination_ward) %>%
summarize(d_count = n()) %>%
arrange(desc(d_count))
# Create a table which deducts the count of origins from destinations
final_table <- o_table %>% left_join(d_table, by = c("origin_ward" = "destination_ward"))
final_table$inflows_count <- final_table$d_count - final_table$o_count
# Display the table of inflows
final_table %>%
select(origin_ward,inflows_count) %>%
arrange(desc(inflows_count))
# Join inflows dataframe with wards
wards <- wards %>% left_join(final_table, by = c ("ward_name" = "origin_ward"))
# Add spatial information about the wards
wards <- wards %>% left_join(boundaries %>% select(msoa11cd, geometry), by = c("msoa" = "msoa11cd"))
wards <- wards %>% st_sf(sf_column_name = "geometry")
# Map of the inflows counts
tm_shape(wards) +
tm_polygons(col = "inflows_count", style = "jenks", midpoint = NA)
# Map of the inflows counts
tm_shape(wards) +
tm_polygons(col = "inflows_count", style = "jenks", midpoint = NA) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks", midpoint = NA) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks", midpoint = NA, alpha = 0.7) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks", midpoint = NA, alpha = 0.65) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks", midpoint = NA, alpha = 0.7) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks", midpoint = NA, alpha = 0.7, title = "Inflows count") +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
#setwd("GitHub\\Leeds_Microsim\\R_proj")
# Required packages
library(sf)
library(stplanr)
library(leaflet)
library(tmap)
library(tidyverse)
library(shiny)
library(igraph)
library(tidygraph)
library(ggraph)
tmap_mode("view")
# Load pre-processed Leeds OD matrix and Leeds boundaries datasets(requires access to SEED)
source("M:\\GitHub\\Leeds_Microsim\\R_proj\\preprocessing_leeds_OD_matrix.R")
# Load 2011 Census OD flows
census_flows <- read.csv("M:\\GitHub\\Leeds_Microsim\\data\\OD_leeds_MSOA_commute_census.csv")
# Interactive histogram of modes of travel
selectInput(inputId = "mode_of_travel", label = "Mode of travel:", choices = c("motorised_road", "rail"), selected = "rail")
renderPlot({
ggplot(
leeds_OD_matrix %>%
filter (mode_of_travel == input$mode_of_travel)%>%
group_by(day_part) %>%
summarise(counts = n()),
aes(x = day_part, y = counts)
) +
geom_bar(fill = "#0073C2FF", stat = "identity")
})
# Table of the most frequent origin wards
o_table <- leeds_OD_matrix %>%
group_by(origin_ward) %>%
summarize(o_count = n()) %>%
arrange(desc(o_count))
# Table of the most frequent destination wards
d_table <- leeds_OD_matrix %>%
group_by(destination_ward) %>%
summarize(d_count = n()) %>%
arrange(desc(d_count))
# Create a table which deducts the count of origins from destinations
final_table <- o_table %>% left_join(d_table, by = c("origin_ward" = "destination_ward"))
final_table$inflows_count <- final_table$d_count - final_table$o_count
final_table %>%
select(origin_ward,inflows_count) %>%
arrange(desc(inflows_count))
final_table %>%
select(origin_ward,inflows_count) %>%
arrange(inflows_count)
# Join inflows dataframe with wards
wards <- ward_lookup %>% left_join(final_table, by = c ("ward_name" = "origin_ward"))
# Add spatial information about the wards
wards <- wards %>% left_join(boundaries %>% select(msoa11cd, geometry), by = c("msoa" = "msoa11cd"))
wards <- wards %>% st_sf(sf_column_name = "geometry")
# Map of the inflows counts
tm_shape(wards) +
tm_polygons(col = "inflows_count", style = "jenks", midpoint = NA,  palette="RdYlGn")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks", midpoint = NA, alpha = 0.7, title = "Inflows count")+
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks", midpoint = NA, alpha = 0.7, title = "Inflows count", breaks   = c(-130,-50,0, 50,115,625) )+
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks",breaks   = c(-130,-50,0, 50,115,625)  alpha = 0.7, title = "Inflows count"  )+
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks",breaks   = c(-130,-50,0, 50,115,625),  alpha = 0.7, title = "Inflows count"  )+
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks",breaks   = c(-50,0, 50,115,625),  alpha = 0.7, title = "Inflows count"  )+
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks",breaks = c(-50,0, 50,115),  alpha = 0.7, title = "Inflows count"  )+
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks", midpoint = NA, alpha = 0.7, title = "Inflows count",  )+
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks", midpoint = NA, alpha = 0.7, title = "Inflows count", palette = "seq" )+
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks", midpoint = NA, alpha = 0.7, title = "Inflows count", palette = "div" )+
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(col = "inflows_count", style = "jenks", midpoint = 0, alpha = 0.7, title = "Inflows count", palette = "div" )+
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
style = "jenks",
breaks = c(-155,-70,0,70,150)
alpha = 0.7,
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
style = "jenks",
breaks = c(-155,-70,0,70,150),
alpha = 0.7,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
style = "jenks",
breaks = c(-Inf, 0, 2, 4, 6, Inf),
alpha = 0.7,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
breaks = c(-155,-70,0,70,150)
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
style = "jenks",
breaks = c(-155,-70,0,70,150),
alpha = 0.7,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
breaks = c(-155,-70,0,70,150),
alpha = 0.7,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
breaks = c(-155,-70,0,70,150,650),
alpha = 0.7,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
breaks = c(-155,-70,0,70,150,650),
alpha = 0.7,
midpoint = 0,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
breaks = c(-155,-70,0,70,150,350),
alpha = 0.7,
midpoint = 0,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
breaks = c(-155,-70,0,70,150,400),
alpha = 0.7,
midpoint = 0,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
breaks = c(-155,-70,0,70,150,200),
alpha = 0.7,
midpoint = 0,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
breaks = c(-155,-50,0,50,150),
alpha = 0.7,
midpoint = 0,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
breaks = c(-155,-50,0,50,150,300),
alpha = 0.7,
midpoint = 0,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
breaks = c(-155,-50,0,50,150,300),
alpha = 0.7,
midpoint = 50,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
breaks = c(-155,-50,0,50,150,300),
alpha = 0.7,
midpoint = 30,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
style = "jenks",
alpha = 0.7,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
style = "jenks",
alpha = 0.7,
midpoint = 50
title = "Inflows count",
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
style = "jenks",
alpha = 0.7,
midpoint = 50,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
style = "jenks",
alpha = 0.7,
midpoint = 80,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
style = "jenks",
alpha = 0.7,
midpoint = 100,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
style = "jenks",
alpha = 0.7,
midpoint = 10,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
style = "jenks",
alpha = 0.7,
midpoint = -50,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
# Map of the inflows counts
tm_shape(wards) +
tm_fill(
col = "inflows_count",
breaks = c(-155,-50,0,50,150,300),
alpha = 0.7,
midpoint = 30,
title = "Inflows count",
palette = "div"
) +
tm_borders() +
tm_basemap(server = "OpenStreetMap.BlackAndWhite")
